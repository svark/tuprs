---
source: tuprs/tests/parsedir.rs
expression: strings
snapshot_kind: text
---
[
  "ResolvedLink { primary_sources: [], secondary_sources: [GroupEntry(Descriptor(./<output2>), Descriptor(./a/out2.txt))], rule_formula_desc: RuleDescriptor(Descriptor(?RuleRefDescriptor(Descriptor(at ./a/Tupfile: line:3, span:1->46))? RuleFormula { description: None, formula: [Literal(\"touch\"), Sp1, Literal(\"out7.txt\"), Sp1] })), primary_targets: [Descriptor(./a/out7.txt)], secondary_targets: [], excluded_targets: [], group: None, bin: Some(Descriptor(./a/{o7} )), rule_ref: RuleRefDescriptor(Descriptor(at ./a/Tupfile: line:3, span:1->46)), env: EnvList { env: EnvDescriptor(WINDIR), prevs: Some(EnvList { env: EnvDescriptor(TMP), prevs: Some(EnvList { env: EnvDescriptor(TEMP), prevs: Some(EnvList { env: EnvDescriptor(SYSTEMROOT), prevs: Some(EnvList { env: EnvDescriptor(PATHEXT), prevs: Some(EnvList { env: EnvDescriptor(PATH), prevs: Some(EnvList { env: EnvDescriptor(OS), prevs: Some(EnvList { env: EnvDescriptor(HOME), prevs: Some(EnvList { env: EnvDescriptor(COMSPEC), prevs: None }) }) }) }) }) }) }) }) }, search_dirs: [], tupfiles_read: [Descriptor(./a/Tupfile), Descriptor(./tup.config)] }",
  "ResolvedLink { primary_sources: [Deglob(MatchingPath { path_descriptor: Descriptor(./a/in0.txt), glob_descriptor: None, captured_globs: [], parent_descriptor: Descriptor(./a) })], secondary_sources: [], rule_formula_desc: RuleDescriptor(Descriptor(?RuleRefDescriptor(Descriptor(at ./a/Tupfile: line:6, span:1->56))? RuleFormula { description: None, formula: [Literal(\"cp\"), Sp1, Literal(\"in0.txt\"), Sp1, Literal(\"out2.txt\"), Sp1] })), primary_targets: [Descriptor(./a/out2.txt)], secondary_targets: [], excluded_targets: [Descriptor(./a/^.*FltMgrMsg)], group: Some(Descriptor(./<output2>)), bin: None, rule_ref: RuleRefDescriptor(Descriptor(at ./a/Tupfile: line:6, span:1->56)), env: EnvList { env: EnvDescriptor(WINDIR), prevs: Some(EnvList { env: EnvDescriptor(TMP), prevs: Some(EnvList { env: EnvDescriptor(TEMP), prevs: Some(EnvList { env: EnvDescriptor(SYSTEMROOT), prevs: Some(EnvList { env: EnvDescriptor(PATHEXT), prevs: Some(EnvList { env: EnvDescriptor(PATH), prevs: Some(EnvList { env: EnvDescriptor(OS), prevs: Some(EnvList { env: EnvDescriptor(HOME), prevs: Some(EnvList { env: EnvDescriptor(COMSPEC), prevs: None }) }) }) }) }) }) }) }) }, search_dirs: [], tupfiles_read: [Descriptor(./a/Tupfile), Descriptor(./tup.config)] }",
  "ResolvedLink { primary_sources: [Deglob(MatchingPath { path_descriptor: Descriptor(./a/out1.txt), glob_descriptor: Some(Descriptor(./a/out[12].txt)), captured_globs: [\"1\"], parent_descriptor: Descriptor(./a) })], secondary_sources: [], rule_formula_desc: RuleDescriptor(Descriptor(?RuleRefDescriptor(Descriptor(at ./a/Tupfile: line:8, span:1->40))? RuleFormula { description: None, formula: [Literal(\"cp\"), Sp1, Literal(\"out1.txt\"), Sp1, Literal(\"out13.txt\"), Sp1] })), primary_targets: [Descriptor(./a/out13.txt)], secondary_targets: [], excluded_targets: [], group: None, bin: None, rule_ref: RuleRefDescriptor(Descriptor(at ./a/Tupfile: line:8, span:1->40)), env: EnvList { env: EnvDescriptor(WINDIR), prevs: Some(EnvList { env: EnvDescriptor(TMP), prevs: Some(EnvList { env: EnvDescriptor(TEMP), prevs: Some(EnvList { env: EnvDescriptor(SYSTEMROOT), prevs: Some(EnvList { env: EnvDescriptor(PATHEXT), prevs: Some(EnvList { env: EnvDescriptor(PATH), prevs: Some(EnvList { env: EnvDescriptor(OS), prevs: Some(EnvList { env: EnvDescriptor(HOME), prevs: Some(EnvList { env: EnvDescriptor(COMSPEC), prevs: None }) }) }) }) }) }) }) }) }, search_dirs: [], tupfiles_read: [Descriptor(./a/Tupfile), Descriptor(./tup.config)] }",
  "ResolvedLink { primary_sources: [Deglob(MatchingPath { path_descriptor: Descriptor(./a/out1.txt), glob_descriptor: Some(Descriptor(./a/out[1].txt)), captured_globs: [\"1\"], parent_descriptor: Descriptor(./a) })], secondary_sources: [], rule_formula_desc: RuleDescriptor(Descriptor(?RuleRefDescriptor(Descriptor(at ./a/Tupfile: line:14, span:1->43))? RuleFormula { description: None, formula: [Literal(\"cp\"), Sp1, Literal(\"out1.txt\"), Sp1, Literal(\"new_1.txt\"), Sp1] })), primary_targets: [Descriptor(./a/new_1.txt)], secondary_targets: [], excluded_targets: [], group: None, bin: None, rule_ref: RuleRefDescriptor(Descriptor(at ./a/Tupfile: line:14, span:1->43)), env: EnvList { env: EnvDescriptor(WINDIR), prevs: Some(EnvList { env: EnvDescriptor(TMP), prevs: Some(EnvList { env: EnvDescriptor(TEMP), prevs: Some(EnvList { env: EnvDescriptor(SYSTEMROOT), prevs: Some(EnvList { env: EnvDescriptor(PATHEXT), prevs: Some(EnvList { env: EnvDescriptor(PATH), prevs: Some(EnvList { env: EnvDescriptor(OS), prevs: Some(EnvList { env: EnvDescriptor(HOME), prevs: Some(EnvList { env: EnvDescriptor(COMSPEC), prevs: None }) }) }) }) }) }) }) }) }, search_dirs: [], tupfiles_read: [Descriptor(./a/Tupfile), Descriptor(./tup.config)] }",
  "ResolvedLink { primary_sources: [Deglob(MatchingPath { path_descriptor: Descriptor(./a/out2.txt), glob_descriptor: None, captured_globs: [], parent_descriptor: Descriptor(./a) })], secondary_sources: [], rule_formula_desc: RuleDescriptor(Descriptor(?RuleRefDescriptor(Descriptor(at ./a/Tupfile: line:10, span:1->62))? RuleFormula { description: None, formula: [Literal(\"cp\"), Sp1, Literal(\"out2.txt\"), Sp1, Literal(\"outout2.txt\"), Sp1] })), primary_targets: [Descriptor(./a/outout2.txt)], secondary_targets: [], excluded_targets: [Descriptor(./a/^.*FltMgrMsg)], group: None, bin: None, rule_ref: RuleRefDescriptor(Descriptor(at ./a/Tupfile: line:10, span:1->62)), env: EnvList { env: EnvDescriptor(WINDIR), prevs: Some(EnvList { env: EnvDescriptor(TMP), prevs: Some(EnvList { env: EnvDescriptor(TEMP), prevs: Some(EnvList { env: EnvDescriptor(SYSTEMROOT), prevs: Some(EnvList { env: EnvDescriptor(PATHEXT), prevs: Some(EnvList { env: EnvDescriptor(PATH), prevs: Some(EnvList { env: EnvDescriptor(OS), prevs: Some(EnvList { env: EnvDescriptor(HOME), prevs: Some(EnvList { env: EnvDescriptor(COMSPEC), prevs: None }) }) }) }) }) }) }) }) }, search_dirs: [], tupfiles_read: [Descriptor(./a/Tupfile), Descriptor(./tup.config)] }",
  "ResolvedLink { primary_sources: [Deglob(MatchingPath { path_descriptor: Descriptor(./a/patches.txt), glob_descriptor: None, captured_globs: [], parent_descriptor: Descriptor(./a) })], secondary_sources: [], rule_formula_desc: RuleDescriptor(Descriptor(?RuleRefDescriptor(Descriptor(at ./a/Tupfile: line:12, span:1->32\tfrom\n./a/tup_run_output_temp12.tup: line:1, span:1->42))? RuleFormula { description: None, formula: [Literal(\"echo\"), Sp1, Literal(\"patches.txt\"), Sp1, Literal(\">\"), Sp1, Literal(\"outpatches.txt.txt\"), Sp1] })), primary_targets: [Descriptor(./a/outpatches.txt.txt)], secondary_targets: [], excluded_targets: [], group: None, bin: None, rule_ref: RuleRefDescriptor(Descriptor(at ./a/Tupfile: line:12, span:1->32\tfrom\n./a/tup_run_output_temp12.tup: line:1, span:1->42)), env: EnvList { env: EnvDescriptor(WINDIR), prevs: Some(EnvList { env: EnvDescriptor(TMP), prevs: Some(EnvList { env: EnvDescriptor(TEMP), prevs: Some(EnvList { env: EnvDescriptor(SYSTEMROOT), prevs: Some(EnvList { env: EnvDescriptor(PATHEXT), prevs: Some(EnvList { env: EnvDescriptor(PATH), prevs: Some(EnvList { env: EnvDescriptor(OS), prevs: Some(EnvList { env: EnvDescriptor(HOME), prevs: Some(EnvList { env: EnvDescriptor(COMSPEC), prevs: None }) }) }) }) }) }) }) }) }, search_dirs: [], tupfiles_read: [Descriptor(./a/Tupfile), Descriptor(./tup.config)] }",
  "ResolvedLink { primary_sources: [Deglob(MatchingPath { path_descriptor: Descriptor(./b/in1.txt), glob_descriptor: None, captured_globs: [], parent_descriptor: Descriptor(./b) })], secondary_sources: [], rule_formula_desc: RuleDescriptor(Descriptor(?RuleRefDescriptor(Descriptor(at ./b/Tupfile: line:5, span:1->75))? RuleFormula { description: None, formula: [Literal(\"cat\"), Sp1, Literal(\"in1.txt\"), Sp1, Literal(\"&\"), Sp1, Literal(\"cp\"), Sp1, Literal(\"in1.txt\"), Sp1, Literal(\"out0.txt\"), Sp1] })), primary_targets: [Descriptor(./b/out0.txt)], secondary_targets: [], excluded_targets: [Descriptor(./b/^.*FltMgrMsg)], group: Some(Descriptor(./<output0>)), bin: Some(Descriptor(./b/{out} )), rule_ref: RuleRefDescriptor(Descriptor(at ./b/Tupfile: line:5, span:1->75)), env: EnvList { env: EnvDescriptor(WINDIR), prevs: Some(EnvList { env: EnvDescriptor(TMP), prevs: Some(EnvList { env: EnvDescriptor(TEMP), prevs: Some(EnvList { env: EnvDescriptor(SYSTEMROOT), prevs: Some(EnvList { env: EnvDescriptor(PATHEXT), prevs: Some(EnvList { env: EnvDescriptor(PATH), prevs: Some(EnvList { env: EnvDescriptor(OS), prevs: Some(EnvList { env: EnvDescriptor(HOME), prevs: Some(EnvList { env: EnvDescriptor(COMSPEC), prevs: None }) }) }) }) }) }) }) }) }, search_dirs: [], tupfiles_read: [Descriptor(./b/Tupfile), Descriptor(./tup.config)] }",
  "ResolvedLink { primary_sources: [Deglob(MatchingPath { path_descriptor: Descriptor(./b/in1.txt), glob_descriptor: Some(Descriptor(./b/in*.txt)), captured_globs: [\"1\"], parent_descriptor: Descriptor(./b) })], secondary_sources: [], rule_formula_desc: RuleDescriptor(Descriptor(?RuleRefDescriptor(Descriptor(at ./b/Tupfile: line:4, span:1->48))? RuleFormula { description: None, formula: [Literal(\"echo\"), Sp1, Literal(\"in1.txt\"), Sp1, Literal(\">\"), Sp1, Literal(\"outecho.txt\"), Sp1] })), primary_targets: [Descriptor(./b/outecho.txt)], secondary_targets: [], excluded_targets: [], group: None, bin: Some(Descriptor(./b/{out} )), rule_ref: RuleRefDescriptor(Descriptor(at ./b/Tupfile: line:4, span:1->48)), env: EnvList { env: EnvDescriptor(WINDIR), prevs: Some(EnvList { env: EnvDescriptor(TMP), prevs: Some(EnvList { env: EnvDescriptor(TEMP), prevs: Some(EnvList { env: EnvDescriptor(SYSTEMROOT), prevs: Some(EnvList { env: EnvDescriptor(PATHEXT), prevs: Some(EnvList { env: EnvDescriptor(PATH), prevs: Some(EnvList { env: EnvDescriptor(OS), prevs: Some(EnvList { env: EnvDescriptor(HOME), prevs: Some(EnvList { env: EnvDescriptor(COMSPEC), prevs: None }) }) }) }) }) }) }) }) }, search_dirs: [], tupfiles_read: [Descriptor(./b/Tupfile), Descriptor(./tup.config)] }",
  "ResolvedLink { primary_sources: [Deglob(MatchingPath { path_descriptor: Descriptor(./b/b1/ib1.txt), glob_descriptor: Some(Descriptor(./b/**/ib*.txt)), captured_globs: [\"/b1/\", \"1\"], parent_descriptor: Descriptor(./b) })], secondary_sources: [], rule_formula_desc: RuleDescriptor(Descriptor(?RuleRefDescriptor(Descriptor(at ./b/Tupfile: line:8, span:1->52))? RuleFormula { description: None, formula: [Literal(\"cp\"), Sp1, Literal(\"b1/ib1.txt\"), Sp1, Literal(\"b1/out/o1.txt\"), Sp1] })), primary_targets: [Descriptor(./b/b1/out/o1.txt)], secondary_targets: [], excluded_targets: [], group: None, bin: None, rule_ref: RuleRefDescriptor(Descriptor(at ./b/Tupfile: line:8, span:1->52)), env: EnvList { env: EnvDescriptor(WINDIR), prevs: Some(EnvList { env: EnvDescriptor(TMP), prevs: Some(EnvList { env: EnvDescriptor(TEMP), prevs: Some(EnvList { env: EnvDescriptor(SYSTEMROOT), prevs: Some(EnvList { env: EnvDescriptor(PATHEXT), prevs: Some(EnvList { env: EnvDescriptor(PATH), prevs: Some(EnvList { env: EnvDescriptor(OS), prevs: Some(EnvList { env: EnvDescriptor(HOME), prevs: Some(EnvList { env: EnvDescriptor(COMSPEC), prevs: None }) }) }) }) }) }) }) }) }, search_dirs: [], tupfiles_read: [Descriptor(./b/Tupfile), Descriptor(./tup.config)] }",
  "ResolvedLink { primary_sources: [GroupEntry(Descriptor(./<output0>), Descriptor(./b/out0.txt))], secondary_sources: [], rule_formula_desc: RuleDescriptor(Descriptor(?RuleRefDescriptor(Descriptor(at ./a/Tupfile: line:2, span:1->61))? RuleFormula { description: None, formula: [Literal(\"cp\"), Sp1, Literal(\"%<output0>\"), Sp1, Literal(\"out1.txt\"), Sp1] })), primary_targets: [Descriptor(./a/out1.txt)], secondary_targets: [], excluded_targets: [Descriptor(./a/^.*FltMgrMsg)], group: None, bin: None, rule_ref: RuleRefDescriptor(Descriptor(at ./a/Tupfile: line:2, span:1->61)), env: EnvList { env: EnvDescriptor(WINDIR), prevs: Some(EnvList { env: EnvDescriptor(TMP), prevs: Some(EnvList { env: EnvDescriptor(TEMP), prevs: Some(EnvList { env: EnvDescriptor(SYSTEMROOT), prevs: Some(EnvList { env: EnvDescriptor(PATHEXT), prevs: Some(EnvList { env: EnvDescriptor(PATH), prevs: Some(EnvList { env: EnvDescriptor(OS), prevs: Some(EnvList { env: EnvDescriptor(HOME), prevs: Some(EnvList { env: EnvDescriptor(COMSPEC), prevs: None }) }) }) }) }) }) }) }) }, search_dirs: [], tupfiles_read: [Descriptor(./a/Tupfile), Descriptor(./tup.config)] }",
  "ResolvedLink { primary_sources: [GroupEntry(Descriptor(./<output2>), Descriptor(./a/out2.txt))], secondary_sources: [], rule_formula_desc: RuleDescriptor(Descriptor(?RuleRefDescriptor(Descriptor(at ./b/Tupfile: line:6, span:1->74))? RuleFormula { description: Some(RuleDescription { flags: \"\", display_str: [Literal(\"CP\"), Sp1, Literal(\"to\"), Sp1, Literal(\"out3.txt\")] }), formula: [Literal(\"cp\"), Sp1, Literal(\"%<output2>\"), Sp1, Literal(\"out3.txt\"), Sp1] })), primary_targets: [Descriptor(./b/out3.txt)], secondary_targets: [], excluded_targets: [Descriptor(./b/^.*FltMgrMsg)], group: None, bin: None, rule_ref: RuleRefDescriptor(Descriptor(at ./b/Tupfile: line:6, span:1->74)), env: EnvList { env: EnvDescriptor(WINDIR), prevs: Some(EnvList { env: EnvDescriptor(TMP), prevs: Some(EnvList { env: EnvDescriptor(TEMP), prevs: Some(EnvList { env: EnvDescriptor(SYSTEMROOT), prevs: Some(EnvList { env: EnvDescriptor(PATHEXT), prevs: Some(EnvList { env: EnvDescriptor(PATH), prevs: Some(EnvList { env: EnvDescriptor(OS), prevs: Some(EnvList { env: EnvDescriptor(HOME), prevs: Some(EnvList { env: EnvDescriptor(COMSPEC), prevs: None }) }) }) }) }) }) }) }) }, search_dirs: [], tupfiles_read: [Descriptor(./b/Tupfile), Descriptor(./tup.config)] }",
  "ResolvedLink { primary_sources: [BinEntry(Descriptor(./a/{o7} ), Descriptor(./a/out7.txt))], secondary_sources: [], rule_formula_desc: RuleDescriptor(Descriptor(?RuleRefDescriptor(Descriptor(at ./a/Tupfile: line:10, span:1->62))? RuleFormula { description: None, formula: [Literal(\"cp\"), Sp1, Literal(\"out7.txt\"), Sp1, Literal(\"outout7.txt\"), Sp1] })), primary_targets: [Descriptor(./a/outout7.txt)], secondary_targets: [], excluded_targets: [Descriptor(./a/^.*FltMgrMsg)], group: None, bin: None, rule_ref: RuleRefDescriptor(Descriptor(at ./a/Tupfile: line:10, span:1->62)), env: EnvList { env: EnvDescriptor(WINDIR), prevs: Some(EnvList { env: EnvDescriptor(TMP), prevs: Some(EnvList { env: EnvDescriptor(TEMP), prevs: Some(EnvList { env: EnvDescriptor(SYSTEMROOT), prevs: Some(EnvList { env: EnvDescriptor(PATHEXT), prevs: Some(EnvList { env: EnvDescriptor(PATH), prevs: Some(EnvList { env: EnvDescriptor(OS), prevs: Some(EnvList { env: EnvDescriptor(HOME), prevs: Some(EnvList { env: EnvDescriptor(COMSPEC), prevs: None }) }) }) }) }) }) }) }) }, search_dirs: [], tupfiles_read: [Descriptor(./a/Tupfile), Descriptor(./tup.config)] }",
  "ResolvedLink { primary_sources: [BinEntry(Descriptor(./b/{out} ), Descriptor(./b/out0.txt)), BinEntry(Descriptor(./b/{out} ), Descriptor(./b/outecho.txt))], secondary_sources: [], rule_formula_desc: RuleDescriptor(Descriptor(?RuleRefDescriptor(Descriptor(at ./b/Tupfile: line:7, span:1->35))? RuleFormula { description: Some(RuleDescription { flags: \"\", display_str: [Literal(\"echo\"), Sp1] }), formula: [Literal(\"echo\"), Sp1] })), primary_targets: [], secondary_targets: [], excluded_targets: [], group: None, bin: None, rule_ref: RuleRefDescriptor(Descriptor(at ./b/Tupfile: line:7, span:1->35)), env: EnvList { env: EnvDescriptor(WINDIR), prevs: Some(EnvList { env: EnvDescriptor(TMP), prevs: Some(EnvList { env: EnvDescriptor(TEMP), prevs: Some(EnvList { env: EnvDescriptor(SYSTEMROOT), prevs: Some(EnvList { env: EnvDescriptor(PATHEXT), prevs: Some(EnvList { env: EnvDescriptor(PATH), prevs: Some(EnvList { env: EnvDescriptor(OS), prevs: Some(EnvList { env: EnvDescriptor(HOME), prevs: Some(EnvList { env: EnvDescriptor(COMSPEC), prevs: None }) }) }) }) }) }) }) }) }, search_dirs: [], tupfiles_read: [Descriptor(./b/Tupfile), Descriptor(./tup.config)] }"
]
